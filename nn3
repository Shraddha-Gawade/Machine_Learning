import numpy as np
x=np.array(([2,9],[1,5],[3,6]),dtype=float)
y=np.array(([92],[86],[89]),dtype=float)
x=x/np.amax(x,axis=0)
y=y/100

def sigmoid(x):
    return 1/(1+np.exp(-x))
        
def derivatives_sigmoid(x):
    return x*(1-x)

epoch=5
lr=0.1

inputlayer_neurons=2
hiddenlayer_neurons=3
output_neurons=1
wh=np.random.uniform(size=(inputlayer_neurons,hiddenlayer_neurons))
bh=np.random.uniform(size=(1,hiddenlayer_neurons))
wout=np.random.uniform(size=(hiddenlayer_neurons, output_neurons))
bout=np.random.uniform(size=(1,output_neurons))
for i in range(epoch):
    hinp1=np.dot(x,wh)
    hinp=hinp1+bh
    hlayer_act=sigmoid(hinp)
    outinp1=np.dot(hlayer_act,wout)
    outinp=outinp1+bout
    output=sigmoid(outinp)
    
    EO=y-output
    outgrad=derivatives_sigmoid(output)
    d_output=EO*outgrad
    EH=d_output.dot(wout.T)
    hiddengrad=derivatives_sigmoid(hlayer_act)
    d_hiddenlayer=EH*hiddengrad
    wout +=hlayer_act.T.dot(d_output)*lr
    wh+=x.T.dot(d_hiddenlayer)*lr
    
    print(".......Epoch-",i+1,"Starts........")
    print("Input:\n"+str(x))
    print("Actual Output:\n" +str(y))
    print("Predicted Output:\n",output)
    print(".......Epoch-",i+1,"Ends..........\n")
    
    print("Input:\n"+str(x))
    print("Actual Output:\n"+str(y))
    print("Predicted Output:\n",output)




OUTPUT:
>>> %Run nn3.py
.......Epoch- 1 Starts........
Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86245104]
 [0.84799744]
 [0.86135427]]
.......Epoch- 1 Ends..........

Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86245104]
 [0.84799744]
 [0.86135427]]
.......Epoch- 2 Starts........
Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86270921]
 [0.84824814]
 [0.86160991]]
.......Epoch- 2 Ends..........

Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86270921]
 [0.84824814]
 [0.86160991]]
.......Epoch- 3 Starts........
Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86296462]
 [0.8484962 ]
 [0.86186284]]
.......Epoch- 3 Ends..........

Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86296462]
 [0.8484962 ]
 [0.86186284]]
.......Epoch- 4 Starts........
Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86321732]
 [0.84874168]
 [0.86211308]]
.......Epoch- 4 Ends..........

Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86321732]
 [0.84874168]
 [0.86211308]]
.......Epoch- 5 Starts........
Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86346734]
 [0.8489846 ]
 [0.86236068]]
.......Epoch- 5 Ends..........

Input:
[[0.66666667 1.        ]
 [0.33333333 0.55555556]
 [1.         0.66666667]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.86346734]
 [0.8489846 ]
 [0.86236068]]
>>> 

